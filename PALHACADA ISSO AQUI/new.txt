import React, { useState } from 'react';
import "./index.css";
import Login from "./Pages/Login/login.jsx";
import Home from "./Pages/Home/home";
import { BrowserRouter, Route } from "react-router-dom";

const App = () => {
  const [isLoggedIn, setIsLoggedIn] = useState(false); // Estado para rastrear o status de login

  // Função para definir o status de login
  const handleLogin = (status) => {
    setIsLoggedIn(status);
  };

  return (
    <div>
      {isLoggedIn ? <Home /> : <Login onLogin={handleLogin} />}
      {/* Renderiza o componente Home se estiver logado, senão o componente Login */}
    </div>
  );
}

export const createBrowserRouter = () => {
  return (
    <BrowserRouter>
      <Route exact path="/" component={Login} />
      <Route exact path="/home" component={Home} />
    </BrowserRouter>
  );
};



export default App;import { createContext, useContext, useEffect, useState } from 'react';
import {
  getAuth,
  onAuthStateChanged,
  signInWithPopup,
  GoogleAuthProvider,
} from 'firebase/auth';

export const loginWithGoogle = async () => {
  try {
    const result = await signInWithPopup(getAuth, GoogleAuthProvider);
    setUser(result.user);
    setIsLoggedIn(true);
  } catch (error) {
    console.error('Login with Google error', error);
  }
}

//depois de que setlogin é true, precisamos armazenar a info de maneira segura no navegador do user, pois nao queremos que ele peça authorization todas as vez, é um programa que nao precisa de tante seg, ok?
export const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [isLoggedIn, setIsLoggedIn] = useState(false);

  useEffect(() => {
    const auth = getAuth();

    const unsubscribe = onAuthStateChanged(auth, (user) => {
      if (user) {
        setUser(user);
        setIsLoggedIn(true);

        // Store user data in localStorage
        localStorage.setItem('user', JSON.stringify(user));
      } else {
        setUser(null);
        setIsLoggedIn(false);

        // Remove user data from localStorage
        localStorage.removeItem('user');
      }
    });

    return () => unsubscribe();
  }, []);

  return (
    <AuthContext.Provider value={{ user, isLoggedIn }}>
      {children}
    </AuthContext.Provider>
  );
};import { useRouteError, Link } from "react-router-dom";

/* function name(params) {
  
} */

export default function ErrorPage() {
  const error = useRouteError();
  console.error(error);

  return (
    <div id="error-page">
      <h1>Foo-deux!</h1>
      <p>Sua gambiarra não funcionou, abaixo o log:</p>
      <p>
        <i>{error.statusText || error.message}</i>
      </p>

      <button  className="link-buttonAA">
        <Link to="/" >Voltar</Link>
      </button>
    </div>
  );
}
import React, { useContext } from 'react';
import { Link } from 'react-router-dom'; // Se estiver usando React Router


const Home = () => {
  const user = useContext(username);
  return (
    <div>
      {/* Navbar */}
      <nav>
        <div className="logo">
        </div>
        <div className="greeting">
          Olá, {username}
        </div>
      </nav>

      {/* Botões de navegação */}
      <div className="button-container">
        <Link to="/pagina1">
          <button>Botão 1</button>
        </Link>
        <Link to="/pagina2">
          <button>Botão 2</button>
        </Link>
        <Link to="/pagina3">
          <button>Botão 3</button>
        </Link>
        <Link to="/pagina4">
          <button>Botão 4</button>
        </Link>
        <Link to="/pagina5">
          <button>Botão 5</button>
        </Link>
        <Link to="/pagina6">
          <button>Botão 6</button>
        </Link>
      </div>
    </div>
  );
  
}
export default Home;<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="manifest" href="./manifest.json" />
    <link rel="icon" type="image/png" href="" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>SOME TITLE</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  margin: 0;
  padding: 0;
  display: flex;
  justify-content: center;
  align-items: center;
  width: 100vw;
  height: 100vh;
  background-image: url('./assets/IMAGEN DA PRAIA.webp');
  background-repeat: no-repeat;
  background-size: cover;
  background-attachment: fixed;
  background-position: center;
}

.container {
  background-color: #ffffffa1;
  border-radius: 10px;
  padding: 2rem;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
  display: flex;
  flex-direction: column;
  align-items: center;
}

h1 {
  font-family: 'Ubuntu';
  position: relative;
  background: rgba(255, 255, 255, 0);
  padding: 2vh;
  border-radius: 5px;
  text-align: center;
  display: inline-block;
}

.Botao0login {
  padding: 10px 20px;
  border: none;
  background-color: #4285F4;
  color: white;
  border-radius: 10px;
  box-shadow: 5px 5px 10px rgba(0, 0, 0, 0.2);
  cursor: pointer;
  transition: transform 0.2s, box-shadow 0.2s;
}

.Botao0login:hover {
  transform: scale(1.05);
  box-shadow: 8px 8px 15px rgba(0, 0, 0, 0.3);
}

.user-photo {
  border-radius: 50%;
  width: 100px; /* Ajuste o tamanho da foto conforme necessário */
  height: 100px; /* Ajuste o tamanho da foto conforme necessário */
  object-fit: cover; /* Garante que a imagem seja redimensionada para preencher o círculo */
  margin: 20px; /* Espaçamento entre a foto e o texto */
}

/* Estilos personalizados para o card */
.card {
  background-color: #ffffffa1;
  border-radius: 10px;
  padding: 2rem;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
  display: flex;
  flex-direction: column;
  align-items: center;
  border: 1px solid #ccc; /* Adicione uma borda ao redor do card */
  border-radius: 10px; /* Borda arredondada */
  margin: 10px; /* Margem externa para espaço */
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); /* Sombra suave */
}

.card-img-top {
  border-top-left-radius: 10px; /* Arredonde a borda superior esquerda da imagem */
  border-top-right-radius: 10px; /* Arredonde a borda superior direita da imagem */
  align-items: center;

}

.card-body {
  padding: 20px; /* Espaçamento interno para o conteúdo */
  align-items: center;

}

.card-title {
  font-size: 24px; /* Tamanho da fonte do título */
  font-weight: bold; /* Texto em negrito */
  margin-bottom: 10px; /* Margem inferior */

}

.card-text {
  font-size: 18px; /* Tamanho da fonte do texto do card */
  margin-bottom: 20px; /* Margem inferior */
  text-align: center;
  text-decoration: solid;

}

/* Adicione mais estilos personalizados conforme necessário */
import React from 'react';
import { signInWithPopup, GoogleAuthProvider } from "firebase/auth";
import { auth } from '../../firebase.js';
import { useNavigate } from 'react-router-dom';

const Login = () => {
  const navigate = useNavigate();

  const handleSubmit = async (e) => {
    e.preventDefault();

    const provider = new GoogleAuthProvider();

    try {
      const result = await signInWithPopup(auth, provider);
      const user = result.user;
      navigate('/home'); // Redireciona para a página inicial após um login bem-sucedido
    } catch (error) {
      console.error("Erro ao fazer login com Google", error);
    }
  };

  return (
    <div>
      <h1></h1>
      <button className="Botao0login" onClick={handleSubmit}>Entrar com Google</button>
    </div>
  );
}

export default Login;
import * as React from "react";
import * as ReactDOM from "react-dom/client";
import "./index.css";
import App from "./App"
import { createBrowserRouter, RouterProvider } from "react-router-dom";
import Login from "./Pages/Login/login.jsx";



const root = ReactDOM.createRoot(document.getElementById("root"));

root.render(
  <React.StrictMode>
    <RouterProvider router={App} />
  </React.StrictMode>
  );

 
